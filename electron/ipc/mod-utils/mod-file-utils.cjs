const fs = require('fs');
const path = require('path');

/**
 * Disable a mod by renaming it with .disabled extension
 * @param {string} modsDir - The mods directory path
 * @param {string} fileName - The mod filename to disable
 * @returns {Promise<boolean>} - Success status
 */
async function disableMod(modsDir, fileName) {
  try {
    const sourcePath = path.join(modsDir, fileName);
    
    if (!fs.existsSync(sourcePath)) {
      return false;
    }    // Rename the file with .disabled extension
    const targetPath = path.join(modsDir, fileName + '.disabled');
    
    // Check if target already exists
    if (fs.existsSync(targetPath)) {
      return false;
    }

    // Rename the file with .disabled extension
    fs.renameSync(sourcePath, targetPath);
    return true;
  } catch {
    return false;
  }
}

/**
 * Enable a mod by removing the .disabled extension
 * @param {string} modsDir - The mods directory path
 * @param {string} fileName - The mod filename to enable (without .disabled extension)
 * @returns {Promise<boolean>} - Success status
 */
async function enableMod(modsDir, fileName) {
  try {
    const sourcePath = path.join(modsDir, fileName + '.disabled');
    
    if (!fs.existsSync(sourcePath)) {
      return false;
    }

    const targetPath = path.join(modsDir, fileName);
    
    // Check if target already exists
    if (fs.existsSync(targetPath)) {
      return false;
    }

    // Remove the .disabled extension
    fs.renameSync(sourcePath, targetPath);
    return true;
  } catch {
    return false;
  }
}

/**
 * Check if a filename looks like it was generated by a mod API (ugly name)
 * @param {string} fileName - The mod filename to check
 * @returns {boolean} - True if it looks like an API-generated name
 */
function isApiGeneratedName(fileName) {
  const baseName = fileName.replace(/\.jar$/i, '');
  
  // Patterns that indicate API-generated names
  const apiPatterns = [
    /^\[.*\]/, // Starts with [version] like "[1.21.4] Fabric API"
    /\s+\d+\.\d+.*for\s+Fabric/i, // Has "X.Y for Fabric" pattern
    /\s+\d+\.\d+.*for\s+Forge/i, // Has "X.Y for Forge" pattern
    /^.*\s+\d+\.\d+\.\d+\+/, // Has version like "1.2.3+" pattern
    /\s+v?\d+\.\d+\.\d+$/, // Ends with version like "v1.2.3"
  ];
  
  return apiPatterns.some(pattern => pattern.test(baseName));
}

module.exports = {
  disableMod,
  enableMod,
  isApiGeneratedName
};
